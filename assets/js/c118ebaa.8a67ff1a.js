"use strict";(self.webpackChunknotes_3=self.webpackChunknotes_3||[]).push([[74875],{54213:(n,r,e)=>{e.d(r,{R:()=>o,x:()=>i});var s=e(36672);const t={},a=s.createContext(t);function o(n){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(r):{...r,...n}}),[r,n])}function i(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(a.Provider,{value:r},n.children)}},77962:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"CodeSnippets/Docker","title":"Docker","description":"py312","source":"@site/docs/CodeSnippets/Docker.mdx","sourceDirName":"CodeSnippets","slug":"/CodeSnippets/Docker","permalink":"/notes3/docs/CodeSnippets/Docker","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CodeSnippets/Docker.mdx","tags":[],"version":"current","frontMatter":{}}');var t=e(23420),a=e(54213);const o={},i=void 0,p={},c=[{value:"py312",id:"py312",level:2},{value:"Nextjs",id:"nextjs",level:2},{value:"DockerCompose",id:"dockercompose",level:2}];function d(n){const r={code:"code",h2:"h2",pre:"pre",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"py312",children:"py312"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-dockerfile",children:'# \u4f7f\u7528 Python 3.12 \u5b98\u65b9\u955c\u50cf\u4f5c\u4e3a\u57fa\u7840\u955c\u50cf\r\nFROM python:3.12-slim\r\n\r\n# \u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55\r\nWORKDIR /app\r\n\r\n# \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\r\nENV PYTHONUNBUFFERED=1 \\\r\n    PYTHONDONTWRITEBYTECODE=1\r\n\r\n# \u5b89\u88c5\u7cfb\u7edf\u4f9d\u8d56\r\nRUN apt-get update \\\r\n    && apt-get install -y --no-install-recommends \\\r\n        build-essential \\\r\n    && rm -rf /var/lib/apt/lists/*\r\n\r\n# \u590d\u5236\u4f9d\u8d56\u6587\u4ef6\r\nCOPY requirements.txt .\r\n\r\n# \u5b89\u88c5\u9879\u76ee\u4f9d\u8d56\r\nRUN pip install --no-cache-dir -r requirements.txt\r\n\r\n# \u590d\u5236\u9879\u76ee\u6587\u4ef6\r\nCOPY . .\r\n\r\n# \u66b4\u9732\u7aef\u53e3\r\nEXPOSE 8000\r\n\r\n# \u542f\u52a8\u547d\u4ee4\r\nCMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]\n'})}),"\n",(0,t.jsx)(r.h2,{id:"nextjs",children:"Nextjs"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-dockerfile",children:'FROM node:lts-alpine AS base\r\nWORKDIR /app\r\n\r\n# \u4e0b\u8f7d\u6e90\u7801\r\n#FROM base AS source\r\n#\r\n#RUN apk add --no-cache git && \\\r\n#    git clone --recurse-submodules https://github_key@github.com/cruldra/close-lm .\r\n\r\n# \u5b89\u88c5\u4f9d\u8d56\u53ca\u6784\u5efa\r\nFROM base AS builder\r\nENV DOCKER=true\r\n#COPY --from=source /app /app\r\nCOPY . .\r\n\r\nRUN apk add --no-cache libc6-compat && \\\r\n    npm install -g pnpm && \\\r\n    npm config set strict-ssl false && \\\r\n    pnpm i --frozen-lockfile && \\\r\n    pnpm i  @refinedev/cli && \\\r\n    npx prisma generate && \\\r\n    pnpm run build\r\n\r\n#CMD ["tail", "-f", "/dev/null"]\r\n# \u8fd0\u884c\r\nFROM base AS runner\r\nENV NODE_ENV production\r\n# Uncomment the following line in case you want to disable telemetry during runtime.\r\nENV NEXT_TELEMETRY_DISABLED 1\r\n\r\n\r\n# Set the correct permission for prerender cache\r\nRUN mkdir .next\r\n\r\n# Automatically leverage output traces to reduce image size\r\n# https://nextjs.org/docs/advanced-features/output-file-tracing\r\nCOPY --from=builder  /app/.next/standalone ./\r\nCOPY --from=builder  /app/.next/static ./.next/static\r\n\r\nEXPOSE 3000\r\n\r\nENV PORT 3000\r\n\r\n# server.js is created by next build from the standalone output\r\n# https://nextjs.org/docs/pages/api-reference/next-config-js/output\r\nCMD HOSTNAME="0.0.0.0" node server.js\n'})}),"\n",(0,t.jsx)(r.h2,{id:"dockercompose",children:"DockerCompose"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",children:'version: \'3.8\'\r\n\r\nservices:\r\n  postgres:\r\n    image: postgres\r\n    container_name: asm-db\r\n    environment:\r\n      POSTGRES_USER: postgres\r\n      POSTGRES_PASSWORD: postgres\r\n      POSTGRES_DB: asm\r\n      PGDATA: /data/postgres\r\n    volumes:\r\n      - ./pgdata:/data/postgres\r\n    ports:\r\n      - "5432:5432"\r\n    networks:\r\n      - asm\r\n    restart: unless-stopped\r\n    healthcheck:\r\n      test: [ "CMD-SHELL", "pg_isready -U postgres" ]\r\n      interval: 10s\r\n      timeout: 5s\r\n      retries: 5\r\n  asm-admin:\r\n    image: asm-admin\r\n    container_name: asm-admin\r\n    restart: unless-stopped\r\n    ports:\r\n      - "3112:3000"\r\n    environment:\r\n      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/asm\r\n      - NODE_ENV=production\r\n    depends_on:\r\n      - postgres\r\n    networks:\r\n      - asm\r\n  asm-py:\r\n    image: asm-py\r\n    container_name: asm-py\r\n    restart: unless-stopped\r\n    ports:\r\n      - "8000:8000"\r\n    environment:\r\n      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/asm\r\n      - REDIS_HOST=asm-redis\r\n    depends_on:\r\n      - postgres\r\n    networks:\r\n      - asm\r\n  asm-redis:\r\n    image: redis\r\n    container_name: asm-redis\r\n    restart: always\r\n    command: redis-server --requirepass 123394 --bind 0.0.0.0 -::*\r\n    networks:\r\n      - asm\r\n  gateway:\r\n    image: caddy\r\n    container_name: asm-gateway\r\n    restart: unless-stopped\r\n    environment:\r\n      - TZ=Asia/Shanghai\r\n    ports:\r\n      - "80:80"\r\n      - "443:443"\r\n    volumes:\r\n      - ./gateway/Caddyfile:/etc/caddy/Caddyfile\r\n      - ./gateway/.certificates:/data/caddy/certificates\r\n    networks:\r\n      - asm\r\nnetworks:\r\n  asm:\r\n    driver: bridge\n'})})]})}function l(n={}){const{wrapper:r}={...(0,a.R)(),...n.components};return r?(0,t.jsx)(r,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}}}]);