"use strict";(self.webpackChunknotes_3=self.webpackChunknotes_3||[]).push([[5419],{54213:(n,e,r)=>{r.d(e,{R:()=>l,x:()=>a});var t=r(36672);const s={},i=t.createContext(s);function l(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),t.createElement(i.Provider,{value:e},n.children)}},55895:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Rust/\u5e38\u7528\u5e93/Rig-Rust\u7684AI Agent\u6846\u67b6","title":"Rig - Rust \u7684 AI Agent \u6846\u67b6\u5165\u95e8\u6307\u5357","description":"\ud83d\udcda \u6982\u8ff0","source":"@site/docs/Rust/\u5e38\u7528\u5e93/Rig-Rust\u7684AI Agent\u6846\u67b6.md","sourceDirName":"Rust/\u5e38\u7528\u5e93","slug":"/Rust/\u5e38\u7528\u5e93/Rig-Rust\u7684AI Agent\u6846\u67b6","permalink":"/notes3/docs/Rust/\u5e38\u7528\u5e93/Rig-Rust\u7684AI Agent\u6846\u67b6","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Rust/\u5e38\u7528\u5e93/Rig-Rust\u7684AI Agent\u6846\u67b6.md","tags":[],"version":"current","frontMatter":{},"sidebar":"rust","previous":{"title":"Rust \u5b66\u4e60\u8def\u7ebf","permalink":"/notes3/docs/Rust/\u5b66\u4e60\u8def\u7ebf"},"next":{"title":"Rust \u667a\u80fd\u6307\u9488\u8be6\u89e3","permalink":"/notes3/docs/Rust/\u667a\u80fd\u6307\u9488\u8be6\u89e3"}}');var s=r(23420),i=r(54213);const l={},a="Rig - Rust \u7684 AI Agent \u6846\u67b6\u5165\u95e8\u6307\u5357",o={},d=[{value:"\ud83d\udcda \u6982\u8ff0",id:"-\u6982\u8ff0",level:2},{value:"\u6838\u5fc3\u7279\u6027",id:"\u6838\u5fc3\u7279\u6027",level:3},{value:"\u5b98\u65b9\u8d44\u6e90",id:"\u5b98\u65b9\u8d44\u6e90",level:3},{value:"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb",id:"-\u5feb\u901f\u5f00\u59cb",level:2},{value:"1. \u5b89\u88c5",id:"1-\u5b89\u88c5",level:3},{value:"2. \u57fa\u7840\u793a\u4f8b - \u7b80\u5355\u7684 LLM \u8c03\u7528",id:"2-\u57fa\u7840\u793a\u4f8b---\u7b80\u5355\u7684-llm-\u8c03\u7528",level:3},{value:"3. \u73af\u5883\u53d8\u91cf\u914d\u7f6e",id:"3-\u73af\u5883\u53d8\u91cf\u914d\u7f6e",level:3},{value:"\ud83c\udfd7\ufe0f \u6838\u5fc3\u6982\u5ff5",id:"\ufe0f-\u6838\u5fc3\u6982\u5ff5",level:2},{value:"1. Agent\uff08\u4ee3\u7406\uff09",id:"1-agent\u4ee3\u7406",level:3},{value:"2. Tools\uff08\u5de5\u5177\uff09",id:"2-tools\u5de5\u5177",level:3},{value:"3. RAG\uff08\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff09",id:"3-rag\u68c0\u7d22\u589e\u5f3a\u751f\u6210",level:3},{value:"\ud83d\udd27 \u5b9e\u7528\u793a\u4f8b",id:"-\u5b9e\u7528\u793a\u4f8b",level:2},{value:"\u793a\u4f8b 1: \u6587\u4ef6\u5206\u6790 Agent",id:"\u793a\u4f8b-1-\u6587\u4ef6\u5206\u6790-agent",level:3},{value:"\u793a\u4f8b 2: \u591a Agent \u534f\u4f5c\u7cfb\u7edf",id:"\u793a\u4f8b-2-\u591a-agent-\u534f\u4f5c\u7cfb\u7edf",level:3},{value:"\u793a\u4f8b 3: \u5e26\u5de5\u5177\u7684\u667a\u80fd\u52a9\u624b",id:"\u793a\u4f8b-3-\u5e26\u5de5\u5177\u7684\u667a\u80fd\u52a9\u624b",level:3},{value:"\ud83d\udcca Rig vs CrewAI \u5bf9\u6bd4",id:"-rig-vs-crewai-\u5bf9\u6bd4",level:2},{value:"\ud83c\udfaf \u6700\u4f73\u5b9e\u8df5",id:"-\u6700\u4f73\u5b9e\u8df5",level:2},{value:"1. \u9519\u8bef\u5904\u7406",id:"1-\u9519\u8bef\u5904\u7406",level:3},{value:"2. \u914d\u7f6e\u7ba1\u7406",id:"2-\u914d\u7f6e\u7ba1\u7406",level:3},{value:"3. \u65e5\u5fd7\u548c\u76d1\u63a7",id:"3-\u65e5\u5fd7\u548c\u76d1\u63a7",level:3},{value:"\ud83d\udd17 \u76f8\u5173\u8d44\u6e90",id:"-\u76f8\u5173\u8d44\u6e90",level:2},{value:"\ud83d\udcdd \u603b\u7ed3",id:"-\u603b\u7ed3",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"rig---rust-\u7684-ai-agent-\u6846\u67b6\u5165\u95e8\u6307\u5357",children:"Rig - Rust \u7684 AI Agent \u6846\u67b6\u5165\u95e8\u6307\u5357"})}),"\n",(0,s.jsx)(e.h2,{id:"-\u6982\u8ff0",children:"\ud83d\udcda \u6982\u8ff0"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Rig"})," \u662f\u4e00\u4e2a\u7528 Rust \u6784\u5efa\u7684\u6a21\u5757\u5316\u3001\u53ef\u6269\u5c55\u7684 LLM\uff08\u5927\u8bed\u8a00\u6a21\u578b\uff09\u5e94\u7528\u6846\u67b6\uff0c\u7c7b\u4f3c\u4e8e Python \u751f\u6001\u4e2d\u7684 CrewAI\uff0c\u4f46\u4e13\u6ce8\u4e8e Rust \u7684\u6027\u80fd\u548c\u7c7b\u578b\u5b89\u5168\u4f18\u52bf\u3002"]}),"\n",(0,s.jsx)(e.h3,{id:"\u6838\u5fc3\u7279\u6027",children:"\u6838\u5fc3\u7279\u6027"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"\u7edf\u4e00\u7684 LLM \u63a5\u53e3"})," - \u652f\u6301\u591a\u4e2a LLM \u63d0\u4f9b\u5546\uff08OpenAI\u3001Anthropic\u3001Cohere \u7b49\uff09"]}),"\n",(0,s.jsxs)(e.li,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"Rust \u6027\u80fd\u4f18\u52bf"})," - \u96f6\u6210\u672c\u62bd\u8c61\u548c\u5185\u5b58\u5b89\u5168"]}),"\n",(0,s.jsxs)(e.li,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"\u9ad8\u7ea7 AI \u5de5\u4f5c\u6d41"})," - \u5185\u7f6e RAG\u3001\u591a Agent \u7cfb\u7edf\u7b49\u9884\u6784\u5efa\u7ec4\u4ef6"]}),"\n",(0,s.jsxs)(e.li,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"\u7c7b\u578b\u5b89\u5168"})," - \u5229\u7528 Rust \u7684\u5f3a\u7c7b\u578b\u7cfb\u7edf\u786e\u4fdd\u7f16\u8bd1\u65f6\u6b63\u786e\u6027"]}),"\n",(0,s.jsxs)(e.li,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"\u5411\u91cf\u5b58\u50a8\u96c6\u6210"})," - \u5185\u7f6e\u652f\u6301 MongoDB\u3001Qdrant \u7b49\u5411\u91cf\u6570\u636e\u5e93"]}),"\n",(0,s.jsxs)(e.li,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"\u7075\u6d3b\u7684\u5d4c\u5165\u652f\u6301"})," - \u6613\u7528\u7684 API \u5904\u7406\u6587\u672c\u5d4c\u5165"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"\u5b98\u65b9\u8d44\u6e90",children:"\u5b98\u65b9\u8d44\u6e90"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\ud83c\udf10 \u5b98\u7f51: ",(0,s.jsx)(e.a,{href:"https://rig.rs/",children:"https://rig.rs/"})]}),"\n",(0,s.jsxs)(e.li,{children:["\ud83d\udce6 GitHub: ",(0,s.jsx)(e.a,{href:"https://github.com/0xPlaygrounds/rig",children:"https://github.com/0xPlaygrounds/rig"})]}),"\n",(0,s.jsxs)(e.li,{children:["\ud83d\udcd6 \u6587\u6863: ",(0,s.jsx)(e.a,{href:"https://docs.rs/rig-core/latest/rig/",children:"https://docs.rs/rig-core/latest/rig/"})]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-\u5feb\u901f\u5f00\u59cb",children:"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb"}),"\n",(0,s.jsx)(e.h3,{id:"1-\u5b89\u88c5",children:"1. \u5b89\u88c5"}),"\n",(0,s.jsxs)(e.p,{children:["\u5728 ",(0,s.jsx)(e.code,{children:"Cargo.toml"})," \u4e2d\u6dfb\u52a0\u4f9d\u8d56\uff1a"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-toml",children:'[dependencies]\nrig-core = "0.5"\ntokio = { version = "1", features = ["full"] }\n'})}),"\n",(0,s.jsx)(e.h3,{id:"2-\u57fa\u7840\u793a\u4f8b---\u7b80\u5355\u7684-llm-\u8c03\u7528",children:"2. \u57fa\u7840\u793a\u4f8b - \u7b80\u5355\u7684 LLM \u8c03\u7528"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use rig::providers::openai;\n\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n    // \u521b\u5efa OpenAI \u5ba2\u6237\u7aef\n    let openai_client = openai::Client::from_env();\n\n    // \u521b\u5efa Agent\n    let agent = openai_client\n        .agent("gpt-4")\n        .preamble("\u4f60\u662f\u4e00\u4e2a\u53cb\u597d\u7684\u52a9\u624b\u3002")\n        .build();\n\n    // \u53d1\u9001\u63d0\u793a\u5e76\u83b7\u53d6\u54cd\u5e94\n    let response = agent.prompt("\u4ec0\u4e48\u662f Rust\uff1f").await?;\n    \n    println!("\u54cd\u5e94: {}", response);\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"3-\u73af\u5883\u53d8\u91cf\u914d\u7f6e",children:"3. \u73af\u5883\u53d8\u91cf\u914d\u7f6e"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'# \u8bbe\u7f6e OpenAI API Key\nexport OPENAI_API_KEY="your-api-key-here"\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\ufe0f-\u6838\u5fc3\u6982\u5ff5",children:"\ud83c\udfd7\ufe0f \u6838\u5fc3\u6982\u5ff5"}),"\n",(0,s.jsx)(e.h3,{id:"1-agent\u4ee3\u7406",children:"1. Agent\uff08\u4ee3\u7406\uff09"}),"\n",(0,s.jsx)(e.p,{children:"Agent \u662f Rig \u4e2d\u7684\u6838\u5fc3\u62bd\u8c61\uff0c\u4ee3\u8868\u4e00\u4e2a\u53ef\u4ee5\u4e0e LLM \u4ea4\u4e92\u7684\u667a\u80fd\u5b9e\u4f53\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use rig::providers::openai;\n\nlet agent = openai_client\n    .agent("gpt-4")\n    .preamble("\u4f60\u662f\u4e00\u4e2a Rust \u4e13\u5bb6\u3002")\n    .temperature(0.7)\n    .max_tokens(1000)\n    .build();\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Agent \u914d\u7f6e\u9009\u9879"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"preamble()"})," - \u7cfb\u7edf\u63d0\u793a\u8bcd"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"temperature()"})," - \u6e29\u5ea6\u53c2\u6570\uff080.0-2.0\uff09"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"max_tokens()"})," - \u6700\u5927\u751f\u6210 token \u6570"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"top_p()"})," - \u6838\u91c7\u6837\u53c2\u6570"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"2-tools\u5de5\u5177",children:"2. Tools\uff08\u5de5\u5177\uff09"}),"\n",(0,s.jsx)(e.p,{children:"\u5de5\u5177\u5141\u8bb8 Agent \u6267\u884c\u7279\u5b9a\u64cd\u4f5c\uff0c\u5982\u641c\u7d22\u3001\u8ba1\u7b97\u3001API \u8c03\u7528\u7b49\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use rig::tool::Tool;\nuse serde::{Deserialize, Serialize};\nuse serde_json::json;\n\n#[derive(Deserialize)]\nstruct CalculatorInput {\n    operation: String,\n    a: f64,\n    b: f64,\n}\n\n#[derive(Debug, thiserror::Error)]\n#[error("Calculator error")]\nstruct CalculatorError;\n\n#[derive(Deserialize, Serialize)]\nstruct Calculator;\n\nimpl Tool for Calculator {\n    const NAME: &\'static str = "calculator";\n    \n    type Error = CalculatorError;\n    type Args = CalculatorInput;\n    type Output = f64;\n\n    async fn definition(&self, _prompt: String) -> ToolDefinition {\n        ToolDefinition {\n            name: "calculator".to_string(),\n            description: "\u6267\u884c\u57fa\u672c\u6570\u5b66\u8fd0\u7b97".to_string(),\n            parameters: json!({\n                "type": "object",\n                "properties": {\n                    "operation": {\n                        "type": "string",\n                        "description": "\u8fd0\u7b97\u7c7b\u578b: add, subtract, multiply, divide"\n                    },\n                    "a": {"type": "number"},\n                    "b": {"type": "number"}\n                }\n            }),\n        }\n    }\n\n    async fn call(&self, args: Self::Args) -> Result<Self::Output, Self::Error> {\n        match args.operation.as_str() {\n            "add" => Ok(args.a + args.b),\n            "subtract" => Ok(args.a - args.b),\n            "multiply" => Ok(args.a * args.b),\n            "divide" => Ok(args.a / args.b),\n            _ => Err(CalculatorError),\n        }\n    }\n}\n\n// \u4f7f\u7528\u5de5\u5177\nlet agent = openai_client\n    .agent("gpt-4")\n    .preamble("\u4f60\u662f\u4e00\u4e2a\u6570\u5b66\u52a9\u624b\u3002")\n    .tool(Calculator)\n    .build();\n'})}),"\n",(0,s.jsx)(e.h3,{id:"3-rag\u68c0\u7d22\u589e\u5f3a\u751f\u6210",children:"3. RAG\uff08\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff09"}),"\n",(0,s.jsx)(e.p,{children:"Rig \u63d0\u4f9b\u4e86\u5f3a\u5927\u7684 RAG \u652f\u6301\uff0c\u53ef\u4ee5\u8f7b\u677e\u6784\u5efa\u57fa\u4e8e\u6587\u6863\u7684\u95ee\u7b54\u7cfb\u7edf\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use rig::{\n    embeddings::EmbeddingsBuilder,\n    providers::openai::{Client, TEXT_EMBEDDING_ADA_002},\n    vector_store::{in_memory_store::InMemoryVectorStore, VectorStore},\n};\n\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n    let openai_client = Client::from_env();\n\n    // \u521b\u5efa\u5411\u91cf\u5b58\u50a8\n    let mut vector_store = InMemoryVectorStore::default();\n\n    // \u51c6\u5907\u6587\u6863\n    let documents = vec![\n        "Rust \u662f\u4e00\u79cd\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u6ce8\u91cd\u5b89\u5168\u6027\u3001\u5e76\u53d1\u6027\u548c\u6027\u80fd\u3002",\n        "Rust \u7684\u6240\u6709\u6743\u7cfb\u7edf\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u9632\u6b62\u5185\u5b58\u9519\u8bef\u3002",\n        "Cargo \u662f Rust \u7684\u5305\u7ba1\u7406\u5668\u548c\u6784\u5efa\u5de5\u5177\u3002",\n    ];\n\n    // \u521b\u5efa\u5d4c\u5165\u5e76\u5b58\u50a8\n    let embeddings = EmbeddingsBuilder::new(openai_client.embedding_model(TEXT_EMBEDDING_ADA_002))\n        .documents(documents)?\n        .build()\n        .await?;\n\n    vector_store.add_documents(embeddings).await?;\n\n    // \u521b\u5efa RAG Agent\n    let rag_agent = openai_client\n        .agent("gpt-4")\n        .preamble("\u6839\u636e\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\u56de\u7b54\u95ee\u9898\u3002")\n        .context(vector_store.vector_search("Rust \u7684\u7279\u70b9", 2).await?)\n        .build();\n\n    let response = rag_agent.prompt("Rust \u6709\u4ec0\u4e48\u7279\u70b9\uff1f").await?;\n    println!("{}", response);\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-\u5b9e\u7528\u793a\u4f8b",children:"\ud83d\udd27 \u5b9e\u7528\u793a\u4f8b"}),"\n",(0,s.jsx)(e.h3,{id:"\u793a\u4f8b-1-\u6587\u4ef6\u5206\u6790-agent",children:"\u793a\u4f8b 1: \u6587\u4ef6\u5206\u6790 Agent"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use rig::providers::openai;\nuse std::fs;\n\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n    let openai_client = openai::Client::from_env();\n\n    // \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\n    let file_content = fs::read_to_string("example.rs")?;\n\n    // \u521b\u5efa\u4ee3\u7801\u5206\u6790 Agent\n    let code_analyzer = openai_client\n        .agent("gpt-4")\n        .preamble("\u4f60\u662f\u4e00\u4e2a Rust \u4ee3\u7801\u5ba1\u67e5\u4e13\u5bb6\u3002\u5206\u6790\u4ee3\u7801\u5e76\u63d0\u4f9b\u6539\u8fdb\u5efa\u8bae\u3002")\n        .build();\n\n    let analysis = code_analyzer\n        .prompt(&format!("\u5206\u6790\u4ee5\u4e0b\u4ee3\u7801:\\n\\n{}", file_content))\n        .await?;\n\n    println!("\u4ee3\u7801\u5206\u6790\u7ed3\u679c:\\n{}", analysis);\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\u793a\u4f8b-2-\u591a-agent-\u534f\u4f5c\u7cfb\u7edf",children:"\u793a\u4f8b 2: \u591a Agent \u534f\u4f5c\u7cfb\u7edf"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use rig::providers::openai;\n\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n    let client = openai::Client::from_env();\n\n    // \u7814\u7a76\u5458 Agent\n    let researcher = client\n        .agent("gpt-4")\n        .preamble("\u4f60\u662f\u4e00\u4e2a\u7814\u7a76\u5458\uff0c\u8d1f\u8d23\u6536\u96c6\u548c\u6574\u7406\u4fe1\u606f\u3002")\n        .build();\n\n    // \u4f5c\u5bb6 Agent\n    let writer = client\n        .agent("gpt-4")\n        .preamble("\u4f60\u662f\u4e00\u4e2a\u6280\u672f\u4f5c\u5bb6\uff0c\u8d1f\u8d23\u5c06\u7814\u7a76\u7ed3\u679c\u5199\u6210\u6587\u7ae0\u3002")\n        .build();\n\n    // \u7f16\u8f91 Agent\n    let editor = client\n        .agent("gpt-4")\n        .preamble("\u4f60\u662f\u4e00\u4e2a\u7f16\u8f91\uff0c\u8d1f\u8d23\u5ba1\u67e5\u548c\u6539\u8fdb\u6587\u7ae0\u3002")\n        .build();\n\n    // \u5de5\u4f5c\u6d41\u7a0b\n    let topic = "Rust \u7684\u5f02\u6b65\u7f16\u7a0b";\n\n    // 1. \u7814\u7a76\u9636\u6bb5\n    let research = researcher\n        .prompt(&format!("\u7814\u7a76\u4e3b\u9898: {}", topic))\n        .await?;\n\n    // 2. \u5199\u4f5c\u9636\u6bb5\n    let draft = writer\n        .prompt(&format!("\u57fa\u4e8e\u4ee5\u4e0b\u7814\u7a76\u5199\u4e00\u7bc7\u6587\u7ae0:\\n{}", research))\n        .await?;\n\n    // 3. \u7f16\u8f91\u9636\u6bb5\n    let final_article = editor\n        .prompt(&format!("\u5ba1\u67e5\u5e76\u6539\u8fdb\u4ee5\u4e0b\u6587\u7ae0:\\n{}", draft))\n        .await?;\n\n    println!("\u6700\u7ec8\u6587\u7ae0:\\n{}", final_article);\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\u793a\u4f8b-3-\u5e26\u5de5\u5177\u7684\u667a\u80fd\u52a9\u624b",children:"\u793a\u4f8b 3: \u5e26\u5de5\u5177\u7684\u667a\u80fd\u52a9\u624b"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use rig::providers::openai;\nuse rig::tool::Tool;\nuse serde::{Deserialize, Serialize};\nuse serde_json::json;\n\n// \u5929\u6c14\u67e5\u8be2\u5de5\u5177\n#[derive(Deserialize, Serialize)]\nstruct WeatherTool;\n\n#[derive(Deserialize)]\nstruct WeatherArgs {\n    city: String,\n}\n\nimpl Tool for WeatherTool {\n    const NAME: &\'static str = "get_weather";\n    \n    type Error = anyhow::Error;\n    type Args = WeatherArgs;\n    type Output = String;\n\n    async fn definition(&self, _prompt: String) -> ToolDefinition {\n        ToolDefinition {\n            name: "get_weather".to_string(),\n            description: "\u83b7\u53d6\u6307\u5b9a\u57ce\u5e02\u7684\u5929\u6c14\u4fe1\u606f".to_string(),\n            parameters: json!({\n                "type": "object",\n                "properties": {\n                    "city": {\n                        "type": "string",\n                        "description": "\u57ce\u5e02\u540d\u79f0"\n                    }\n                },\n                "required": ["city"]\n            }),\n        }\n    }\n\n    async fn call(&self, args: Self::Args) -> Result<Self::Output, Self::Error> {\n        // \u6a21\u62df\u5929\u6c14 API \u8c03\u7528\n        Ok(format!("{}\u7684\u5929\u6c14: \u6674\u5929\uff0c\u6e29\u5ea6 25\xb0C", args.city))\n    }\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n    let client = openai::Client::from_env();\n\n    let assistant = client\n        .agent("gpt-4")\n        .preamble("\u4f60\u662f\u4e00\u4e2a\u667a\u80fd\u52a9\u624b\uff0c\u53ef\u4ee5\u67e5\u8be2\u5929\u6c14\u4fe1\u606f\u3002")\n        .tool(WeatherTool)\n        .build();\n\n    let response = assistant\n        .prompt("\u5317\u4eac\u4eca\u5929\u5929\u6c14\u600e\u4e48\u6837\uff1f")\n        .await?;\n\n    println!("{}", response);\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-rig-vs-crewai-\u5bf9\u6bd4",children:"\ud83d\udcca Rig vs CrewAI \u5bf9\u6bd4"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"\u7279\u6027"}),(0,s.jsx)(e.th,{children:"Rig (Rust)"}),(0,s.jsx)(e.th,{children:"CrewAI (Python)"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"\u8bed\u8a00"})}),(0,s.jsx)(e.td,{children:"Rust"}),(0,s.jsx)(e.td,{children:"Python"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"\u6027\u80fd"})}),(0,s.jsx)(e.td,{children:"\u6781\u9ad8\uff08\u7f16\u8bd1\u578b\uff09"}),(0,s.jsx)(e.td,{children:"\u4e2d\u7b49\uff08\u89e3\u91ca\u578b\uff09"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"\u7c7b\u578b\u5b89\u5168"})}),(0,s.jsx)(e.td,{children:"\u7f16\u8bd1\u65f6\u68c0\u67e5"}),(0,s.jsx)(e.td,{children:"\u8fd0\u884c\u65f6\u68c0\u67e5"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"\u5185\u5b58\u5b89\u5168"})}),(0,s.jsx)(e.td,{children:"\u6240\u6709\u6743\u7cfb\u7edf"}),(0,s.jsx)(e.td,{children:"GC"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"\u5e76\u53d1\u6a21\u578b"})}),(0,s.jsx)(e.td,{children:"async/await"}),(0,s.jsx)(e.td,{children:"asyncio"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"\u751f\u6001\u6210\u719f\u5ea6"})}),(0,s.jsx)(e.td,{children:"\u53d1\u5c55\u4e2d"}),(0,s.jsx)(e.td,{children:"\u6210\u719f"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"\u5b66\u4e60\u66f2\u7ebf"})}),(0,s.jsx)(e.td,{children:"\u9661\u5ced"}),(0,s.jsx)(e.td,{children:"\u5e73\u7f13"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"\u9002\u7528\u573a\u666f"})}),(0,s.jsx)(e.td,{children:"\u9ad8\u6027\u80fd\u3001\u7cfb\u7edf\u7ea7"}),(0,s.jsx)(e.td,{children:"\u5feb\u901f\u539f\u578b\u3001\u6570\u636e\u79d1\u5b66"})]})]})]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-\u6700\u4f73\u5b9e\u8df5",children:"\ud83c\udfaf \u6700\u4f73\u5b9e\u8df5"}),"\n",(0,s.jsx)(e.h3,{id:"1-\u9519\u8bef\u5904\u7406",children:"1. \u9519\u8bef\u5904\u7406"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use anyhow::Result;\n\nasync fn safe_agent_call() -> Result<String> {\n    let client = openai::Client::from_env();\n    let agent = client.agent("gpt-4").build();\n    \n    let response = agent\n        .prompt("\u4f60\u597d")\n        .await\n        .map_err(|e| anyhow::anyhow!("Agent \u8c03\u7528\u5931\u8d25: {}", e))?;\n    \n    Ok(response)\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"2-\u914d\u7f6e\u7ba1\u7406",children:"2. \u914d\u7f6e\u7ba1\u7406"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:"use serde::Deserialize;\n\n#[derive(Deserialize)]\nstruct Config {\n    model: String,\n    temperature: f32,\n    max_tokens: u32,\n}\n\nimpl Config {\n    fn from_file(path: &str) -> Result<Self> {\n        let content = std::fs::read_to_string(path)?;\n        Ok(toml::from_str(&content)?)\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"3-\u65e5\u5fd7\u548c\u76d1\u63a7",children:"3. \u65e5\u5fd7\u548c\u76d1\u63a7"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use tracing::{info, error};\n\n#[tokio::main]\nasync fn main() -> Result<(), anyhow::Error> {\n    tracing_subscriber::fmt::init();\n    \n    info!("\u542f\u52a8 Agent \u7cfb\u7edf");\n    \n    let client = openai::Client::from_env();\n    let agent = client.agent("gpt-4").build();\n    \n    match agent.prompt("\u6d4b\u8bd5").await {\n        Ok(response) => {\n            info!("Agent \u54cd\u5e94\u6210\u529f");\n            println!("{}", response);\n        }\n        Err(e) => {\n            error!("Agent \u8c03\u7528\u5931\u8d25: {}", e);\n        }\n    }\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-\u76f8\u5173\u8d44\u6e90",children:"\ud83d\udd17 \u76f8\u5173\u8d44\u6e90"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://docs.rs/rig-core/",children:"Rig \u5b98\u65b9\u6587\u6863"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/0xPlaygrounds/rig",children:"Rig GitHub \u4ed3\u5e93"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/0xPlaygrounds/awesome-rig",children:"Rig \u793a\u4f8b\u96c6\u5408"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://rust-lang.github.io/async-book/",children:"Rust \u5f02\u6b65\u7f16\u7a0b"})}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-\u603b\u7ed3",children:"\ud83d\udcdd \u603b\u7ed3"}),"\n",(0,s.jsx)(e.p,{children:"Rig \u662f Rust \u751f\u6001\u4e2d\u6784\u5efa AI Agent \u5e94\u7528\u7684\u5f3a\u5927\u6846\u67b6\uff0c\u5b83\u7ed3\u5408\u4e86 Rust \u7684\u6027\u80fd\u4f18\u52bf\u548c\u73b0\u4ee3 LLM \u5e94\u7528\u7684\u9700\u6c42\u3002\u867d\u7136\u5b66\u4e60\u66f2\u7ebf\u8f83\u9661\uff0c\u4f46\u5bf9\u4e8e\u9700\u8981\u9ad8\u6027\u80fd\u3001\u7c7b\u578b\u5b89\u5168\u7684 AI \u5e94\u7528\u573a\u666f\uff0cRig \u662f\u4e00\u4e2a\u4f18\u79c0\u7684\u9009\u62e9\u3002"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\u9002\u5408\u4f7f\u7528 Rig \u7684\u573a\u666f"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u9700\u8981\u9ad8\u6027\u80fd\u7684 AI \u5e94\u7528"}),"\n",(0,s.jsx)(e.li,{children:"\u7cfb\u7edf\u7ea7 AI \u96c6\u6210"}),"\n",(0,s.jsx)(e.li,{children:"\u5bf9\u7c7b\u578b\u5b89\u5168\u6709\u4e25\u683c\u8981\u6c42"}),"\n",(0,s.jsx)(e.li,{children:"\u9700\u8981\u7ec6\u7c92\u5ea6\u63a7\u5236\u7684\u573a\u666f"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\u63a8\u8350\u5148\u5b66\u4e60 CrewAI \u7684\u573a\u666f"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u5feb\u901f\u539f\u578b\u5f00\u53d1"}),"\n",(0,s.jsx)(e.li,{children:"\u6570\u636e\u79d1\u5b66\u9879\u76ee"}),"\n",(0,s.jsx)(e.li,{children:"Python \u6280\u672f\u6808"}),"\n",(0,s.jsx)(e.li,{children:"\u56e2\u961f\u719f\u6089 Python"}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}}}]);