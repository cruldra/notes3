"use strict";(self.webpackChunknotes_3=self.webpackChunknotes_3||[]).push([[9439],{5153:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Python/SSE","title":"SSE","description":"","source":"@site/docs/Python/SSE.mdx","sourceDirName":"Python","slug":"/Python/SSE","permalink":"/notes3/docs/Python/SSE","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Python/SSE.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"python","previous":{"title":"\u4efb\u52a1\u8c03\u5ea6","permalink":"/notes3/docs/Python/Libraries/\u4efb\u52a1\u8c03\u5ea6"},"next":{"title":"\u5fae\u4fe1\u5ba2\u670d","permalink":"/notes3/docs/Python/\u5fae\u4fe1\u5ba2\u670d"}}');var s=t(6070),o=t(5658);const i={},c=void 0,a={},d=[];function l(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Request, HTTPException, status\r\nfrom sse_starlette.sse import EventSourceResponse\r\nimport asyncio\r\nfrom typing import Dict, Set, Optional\r\nimport json\r\nfrom datetime import datetime\r\nfrom contextlib import asynccontextmanager\r\nfrom loguru import logger\r\n\r\napp = FastAPI()\r\n\r\n# \u5168\u5c40\u8fde\u63a5\u7ba1\u7406\r\nclass ConnectionManager:\r\n    def __init__(self):\r\n        self.active_connections: Dict[str, Set[Request]] = {}\r\n\r\n    async def connect(self, client_id: str, request: Request):\r\n        if client_id not in self.active_connections:\r\n            self.active_connections[client_id] = set()\r\n        self.active_connections[client_id].add(request)\r\n        logger.info(f"Client {client_id} connected. Total connections: {len(self.active_connections)}")\r\n\r\n    async def disconnect(self, client_id: str, request: Request):\r\n        if client_id in self.active_connections:\r\n            self.active_connections[client_id].discard(request)\r\n            if not self.active_connections[client_id]:\r\n                del self.active_connections[client_id]\r\n        logger.info(f"Client {client_id} disconnected. Total connections: {len(self.active_connections)}")\r\n\r\n    def get_connections(self, client_id: str) -> Set[Request]:\r\n        return self.active_connections.get(client_id, set())\r\n\r\nmanager = ConnectionManager()\r\n\r\nasync def event_generator(request: Request, client_id: str) -> AsyncGenerator[str, None]:\r\n    """\u4e8b\u4ef6\u751f\u6210\u5668"""\r\n    try:\r\n        await manager.connect(client_id, request)\r\n        while True:\r\n            if await request.is_disconnected():\r\n                break\r\n\r\n            data = {\r\n                "timestamp": datetime.now().isoformat(),\r\n                "client_id": client_id,\r\n                "data": "Your data here"\r\n            }\r\n\r\n            yield json.dumps({\r\n                "event": "update",\r\n                "data": data,\r\n                "id": str(datetime.now().timestamp())\r\n            })\r\n\r\n            await asyncio.sleep(1)\r\n    except Exception as e:\r\n        logger.error(f"Error in event_generator: {str(e)}")\r\n        raise\r\n    finally:\r\n        await manager.disconnect(client_id, request)\r\n\r\n@app.get("/stream/{client_id}")\r\nasync def stream(request: Request, client_id: str):\r\n    """SSE \u7aef\u70b9"""\r\n    try:\r\n        return EventSourceResponse(\r\n            event_generator(request, client_id),\r\n            ping=20,\r\n            media_type="text/event-stream",\r\n            headers={\r\n                \'Cache-Control\': \'no-cache\',\r\n                \'Connection\': \'keep-alive\',\r\n                \'X-Accel-Buffering\': \'no\'\r\n            }\r\n        )\r\n    except Exception as e:\r\n        logger.error(f"Error in stream endpoint: {str(e)}")\r\n        raise HTTPException(\r\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\r\n            detail="Internal server error"\r\n        )\r\n\r\n# \u5e7f\u64ad\u6d88\u606f\u7ed9\u6240\u6709\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\r\nasync def broadcast_message(client_id: str, message: str):\r\n    """\u5e7f\u64ad\u6d88\u606f"""\r\n    connections = manager.get_connections(client_id)\r\n    for request in connections:\r\n        if not await request.is_disconnected():\r\n            # \u5b9e\u73b0\u6d88\u606f\u5e7f\u64ad\u903b\u8f91\r\n            pass\n'})})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},5658:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(758);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);